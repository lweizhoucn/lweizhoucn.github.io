<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Commit message 和 Change log 编写指南</title>
    <url>/posts/2910968457/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a></p>
</blockquote>
<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;hello world&quot;</span><br></pre></td></tr></table></figure>
<p>上面代码的-m参数，就是用来指定 commit mesage 的。</p>
<a id="more"></a>

<p>如果一行不够，可以只执行git commit，就会跳出文本编辑器，让你写多行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p><img src="/posts/2910968457/1.png"></p>
<p>但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p>
<p><img src="/posts/2910968457/2.png"></p>
<p>目前，社区有多种 Commit message 的写法规范。本文介绍<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">Angular 规范</a>（见上图），这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p>
<h2 id="Commit-message-的作用"><a href="#Commit-message-的作用" class="headerlink" title="Commit message 的作用"></a>Commit message 的作用</h2><p>格式化的Commit message，有几个好处。</p>
<h3 id="提供更多的历史信息，方便快速浏览。"><a href="#提供更多的历史信息，方便快速浏览。" class="headerlink" title="提供更多的历史信息，方便快速浏览。"></a>提供更多的历史信息，方便快速浏览。</h3><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>
<p><img src="/posts/2910968457/3.png"></p>
<h3 id="可以过滤某些commit（比如文档改动），便于快速查找信息。"><a href="#可以过滤某些commit（比如文档改动），便于快速查找信息。" class="headerlink" title="可以过滤某些commit（比如文档改动），便于快速查找信息。"></a>可以过滤某些commit（比如文档改动），便于快速查找信息。</h3><p>比如，下面的命令仅仅显示本次发布新增加的功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure>

<h3 id="可以直接从commit生成Change-log。"><a href="#可以直接从commit生成Change-log。" class="headerlink" title="可以直接从commit生成Change log。"></a>可以直接从commit生成Change log。</h3><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。</p>
<p><img src="/posts/2910968457/4.png"></p>
<h2 id="Commit-message-的格式"><a href="#Commit-message-的格式" class="headerlink" title="Commit message 的格式"></a>Commit message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>
<p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>
<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p><strong>type</strong> 用于说明 commit 的类别，只允许使用下面7个标识。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">feat：新功能（feature）</span><br><span class="line">fix：修补bug</span><br><span class="line">docs：文档（documentation）</span><br><span class="line">style： 格式（不影响代码运行的变动）</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">test：增加测试</span><br><span class="line">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>

<p>如果==type==为<strong>feat</strong>和<strong>fix</strong>，则该 commit 将肯定出现在 Change log 之中。其他情况（<strong>docs</strong>、<strong>chore</strong>、<strong>style</strong>、<strong>refactor</strong>、<strong>test</strong>）由你决定，要不要放入 Change log，建议是不要。</p>
<h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p><strong>scope</strong>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p><strong>subject</strong>是 commit 目的的简短描述，不超过50个字符</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span><br><span class="line">第一个字母小写</span><br><span class="line">结尾不加句号（.）</span><br></pre></td></tr></table></figure>

<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p><strong>Body</strong> 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. </span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">- Bullet points are okay, too</span><br><span class="line">- Use a hanging indent</span><br></pre></td></tr></table></figure>
<p>有两个注意点。</p>
<ul>
<li>使用第一人称现在时，比如使用<strong>change</strong>而不是<strong>changed</strong>或<strong>changes</strong>。</li>
<li>应该说明代码变动的动机，以及与以前行为的对比。</li>
</ul>
<h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p><strong>Footer</strong> 部分只用于两种情况</p>
<h4 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h4><p>如果当前代码与上一个版本不兼容，则 <strong>Footer</strong> 部分以<strong>BREAKING CHANGE</strong>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;attribute&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;@&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>

<h4 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h4><p>如果当前 commit 针对某个issue，那么可以在 <strong>Footer</strong> 部分关闭这个 issue 。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Closes #234</span><br></pre></td></tr></table></figure>
<p>也可以一次关闭多个 issue 。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>

<h3 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h3><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<font color="#F000000" size="4">revert:</font>开头，后面跟着被撤销 Commit 的 Header。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>

<p>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt; .，其中的hash是被撤销 commit 的 SHA 标识符。</p>
<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<strong>Reverts</strong>小标题下面。</p>
<h2 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。</p>
<p>生成的文档包括以下三个部分。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">New features</span><br><span class="line">Bug fixes</span><br><span class="line">Breaking changes.</span><br></pre></td></tr></table></figure>
<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>
<p><a href="https://github.com/ajoslin/conventional-changelog">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g conventional-changelog</span><br><span class="line">cd my-project</span><br><span class="line">conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>
<p>上面命令不会覆盖以前的 Change log，只会在<strong>CHANGELOG.md</strong>的头部加上自从上次发布以来的变动。</p>
<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>

<p>为了方便使用，可以将其写入<strong>package.json</strong>的<strong>scripts</strong>字段。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后，直接运行下面的命令即可。</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">npm run changelog</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
</search>
